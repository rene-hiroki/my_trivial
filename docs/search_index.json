[
["index.html", "日々の雑学 はじめに 0.1 環境", " 日々の雑学 Akiyama Hiroki 最終更新日: 2020-06-01 はじめに 作成中です hogehoge fugafuga 0.1 環境 sessionInfo() ## R version 3.6.3 (2020-02-29) ## Platform: x86_64-w64-mingw32/x64 (64-bit) ## Running under: Windows 10 x64 (build 18363) ## ## Matrix products: default ## ## locale: ## [1] LC_COLLATE=Japanese_Japan.932 LC_CTYPE=Japanese_Japan.932 ## [3] LC_MONETARY=Japanese_Japan.932 LC_NUMERIC=C ## [5] LC_TIME=Japanese_Japan.932 ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] stringi_1.4.6 leaflet_2.0.3 ggmap_3.0.0 DT_0.13 lubridate_1.7.8 ## [6] patchwork_1.0.0 jsonlite_1.6.1 here_0.1 bookdown_0.19 forcats_0.5.0 ## [11] stringr_1.4.0 dplyr_1.0.0 purrr_0.3.4 readr_1.3.1 tidyr_1.1.0 ## [16] tibble_3.0.1 ggplot2_3.3.1 tidyverse_1.3.0 ## ## loaded via a namespace (and not attached): ## [1] httr_1.4.1 modelr_0.1.8 assertthat_0.2.1 sp_1.4-2 ## [5] blob_1.2.1 cellranger_1.1.0 yaml_2.2.1 pillar_1.4.4 ## [9] backports_1.1.7 lattice_0.20-41 glue_1.4.1 digest_0.6.25 ## [13] rvest_0.3.5 colorspace_1.4-1 htmltools_0.4.0 plyr_1.8.6 ## [17] pkgconfig_2.0.3 broom_0.5.6 haven_2.3.0 scales_1.1.1 ## [21] jpeg_0.1-8.1 generics_0.0.2 farver_2.0.3 ellipsis_0.3.1 ## [25] pacman_0.5.1 withr_2.2.0 cli_2.0.2 mime_0.9 ## [29] magrittr_1.5 crayon_1.3.4 readxl_1.3.1 evaluate_0.14 ## [33] fs_1.4.1 fansi_0.4.1 nlme_3.1-148 xml2_1.3.2 ## [37] tools_3.6.3 hms_0.5.3 RgoogleMaps_1.4.5.3 lifecycle_0.2.0 ## [41] munsell_0.5.0 reprex_0.3.0 packrat_0.5.0 compiler_3.6.3 ## [45] rlang_0.4.6 grid_3.6.3 rstudioapi_0.11 rjson_0.2.20 ## [49] htmlwidgets_1.5.1 crosstalk_1.1.0.1 bitops_1.0-6 labeling_0.3 ## [53] rmarkdown_2.1 gtable_0.3.0 DBI_1.1.0 markdown_1.1 ## [57] R6_2.4.1 knitr_1.28 utf8_1.1.4 rprojroot_1.3-2 ## [61] Rcpp_1.0.4.6 vctrs_0.3.0 png_0.1-7 dbplyr_1.4.4 ## [65] tidyselect_1.1.0 xfun_0.14 "],
["01_android_analysis.html", "Chapter: 1 android分析 1.1 ライブラリの準備 1.2 activityをダウンロード 1.3 ここから解析", " Chapter: 1 android分析 1.1 ライブラリの準備 pacman::p_loadを使うと、ライブラリをまとめて読み込んでくれます。また、インストールされていないライブラリがある場合は、インストールかつ読み込みを行ってくれます。 pacmanがインストールされていない場合は、コメントアウトしてインストールしてください。 # install.packages(pacman) pacman::p_load(tidyverse, jsonlite, patchwork, here, lubridate, update = FALSE) 1.2 activityをダウンロード あとで書く google takeout で検索 1.3 ここから解析 1.3.1 activityの読み込み android &lt;- jsonlite::fromJSON(here(&quot;data/android_activity.json&quot;)) 1.3.2 読み込んだactivityデータの概要確認 glimpse(android) ## Rows: 63,120 ## Columns: 5 ## $ header [3m[38;5;246m&lt;chr&gt;[39m[23m &quot;びよーんったー Pro&quot;, &quot;Nova Launcher ホーム&quot;, &quot;Gmail&quot;, &quot;Slack&quot;, &quot;Nova Launch... ## $ title [3m[38;5;246m&lt;chr&gt;[39m[23m &quot;使用: びよーんったー Pro&quot;, &quot;使用: Nova Launcher ホーム&quot;, &quot;使用: Gmail&quot;, &quot;使用: Slac... ## $ titleUrl [3m[38;5;246m&lt;chr&gt;[39m[23m &quot;https://play.google.com/store/apps/details?id=com.ABS104a.biyontt... ## $ time [3m[38;5;246m&lt;chr&gt;[39m[23m &quot;2020-04-16T21:29:57.048Z&quot;, &quot;2020-04-16T21:29:54.832Z&quot;, &quot;2020-04-1... ## $ products [3m[38;5;246m&lt;list&gt;[39m[23m [&quot;Android&quot;, &quot;Android&quot;, &quot;Android&quot;, &quot;Android&quot;, &quot;Android&quot;, &quot;Android&quot;... 1.3.3 timeデータを変換 android &lt;- android %&gt;% mutate(time = parse_datetime(time, locale = locale(tz = &quot;Japan&quot;)) ) %&gt;% mutate(date = lubridate::date(time), year = lubridate::year(time)) 1.3.4 年月ごとのデータ数の集計 2018年8月以前のデータが少ない。 activityデータの収集がうまくいっていなかった？ android %&gt;% group_by(year, month(date)) %&gt;% count() ## # A tibble: 37 x 3 ## # Groups: year, month(date) [37] ## year `month(date)` n ## &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 2016 12 2 ## 2 2017 1 1 ## 3 2017 2 56 ## 4 2017 3 26 ## 5 2017 5 6 ## 6 2017 6 64 ## 7 2017 7 12 ## 8 2017 8 29 ## 9 2017 9 32 ## 10 2017 11 4 ## # ... with 27 more rows android %&gt;% count(date) %&gt;% ggplot() + geom_line(aes(date,n)) + scale_x_date(breaks = &quot;month&quot;, guide = guide_axis(n.dodge = 3)) 1.3.5 データの準備 2019年と2020年のデータのみを使うことにする。 android_latest &lt;- android %&gt;% filter(year %in% c(2019, 2020)) アプリの名前が長いから20文字までにする。 android_latest &lt;- android_latest %&gt;% mutate(header = if_else(str_length(header) &gt;= 20, substr(header, 1, 20), header)) android &lt;- android %&gt;% mutate(header = if_else(str_length(header) &gt;= 20, substr(header, 1, 20), header)) 1.3.6 アプリの使用回数（2019-2020） android_latest %&gt;% count(header, sort = TRUE) %&gt;% head(5) %&gt;% mutate(header = fct_reorder(header, n)) %&gt;% ggplot() + geom_col(aes(y = header, x = n)) + theme_minimal() + labs(title = &quot;Most used Apps - Overall&quot;, subtitle = &quot;Android Smartphone usage&quot;, caption = &quot;Data:Google Takeout&quot;) 1.3.7 アプリの使用回数（すべての年） android %&gt;% count(header, sort = TRUE) %&gt;% head(5) %&gt;% mutate(header = fct_reorder(header, n)) %&gt;% ggplot() + geom_col(aes(y = header, x = n)) + theme_minimal() + labs(title = &quot;Most used Apps - Overall&quot;, subtitle = &quot;Android Smartphone usage&quot;, caption = &quot;Data:Google Takeout&quot;) 1.3.8 比較（2019 vs 2020） android_latest %&gt;% filter(year %in% &#39;2019&#39;) %&gt;% group_by(year, header) %&gt;% summarise(n = n()) %&gt;% arrange(desc(n)) %&gt;% head(5) %&gt;% #View() mutate(header = fct_reorder(header, n)) %&gt;% ggplot() + geom_col(aes(y = header, x = n)) + # facet_wrap(~year, scales = &quot;free&quot;) + theme_minimal() + labs(title = &quot;Most used Apps - 2019&quot;, subtitle = &quot;Android Smartphone usage&quot;, caption = &quot;Data:Google Takeout&quot;) -&gt; p2019 ## `summarise()` regrouping output by &#39;year&#39; (override with `.groups` argument) android_latest %&gt;% filter(year %in% &#39;2020&#39;) %&gt;% group_by(year, header) %&gt;% summarise(n = n()) %&gt;% arrange(desc(n)) %&gt;% head(5) %&gt;% #View() mutate(header = fct_reorder(header, n)) %&gt;% ggplot() + geom_col(aes(y = header, x = n)) + # facet_wrap(~year, scales = &quot;free&quot;) + theme_minimal() + labs(title = &quot;Most used Apps - 2020&quot;, subtitle = &quot;Android Smartphone usage&quot;, caption = &quot;Data:Google Takeout&quot;) -&gt; p2020 ## `summarise()` regrouping output by &#39;year&#39; (override with `.groups` argument) p2019 / p2020 "],
["02_standard_input.html", "Chapter: 2 標準入力 2.1 readLines 2.2 スクリプトで計算処理 2.3 テキストファイルを読ませる", " Chapter: 2 標準入力 標準入力、つまりはPythonで言うところのinput()をRでやろうとしたら、かなり苦労したのでtipsとしてまとめておくことにした。 2.1 readLines ずばりRで標準入力をするにはreadLinesを使う。ただし、 input_lines &lt;- readLines(&quot;stdin&quot;) このように\"stdin\"という引数を使用する。おそらくstandard input の略か何かだろう。 注意すべきは、このコードをRのコンソールで実行してしまうとRがうんともすんとも言わなくなってしまうこと。 詳しい理由はわからないが、コマンドプロンプトからの標準入力を受けるように指示しているので、コンソールで実行してしまうとダメ、ということなのだろうか（誰か教えて欲しい）。 コンソール上で実験的にコードを試したい場合は、readline()を使えばコンソールで入力待ち状態となるので、こちらを使用する。 たとえばstdin.Rに下記のように記述しておき、 #! /usr/bin/env Rscript input_lines &lt;- readLines(&quot;stdin&quot;) cat(input_lines[1]) # catは標準出力 コマンドプロンプトから下記のようにしてstdin.Rを実行してみる Rscript stdin.R すると入力待ち状態になるので、何かしら記述する。 Hello world! そして、ctrl + cあるいはctrl + zの後にEnterで入力を終了すると（他の方法ありますか？） Hello world! とプロンプトに標準出力ができる。 2.2 スクリプトで計算処理 stdin.Rに以下のように記述しておけば、標準入力で受け取った値を、計算処理をしてから返すこともできる。 #! /usr/bin/env Rscript # ライブラリもつかえる library(tidyverse) input_lines &lt;- readLines(&quot;stdin&quot;) x = as.integer(input_lines[1]) # 1つめ（1行目の入力） y = as.integer(input_lines[2]) # 2つめ cat(x + y) 2.3 テキストファイルを読ませる read_text.txtを別に以下のように準備しておき、 （read_text.txtの最終行には改行を入れないと、あとでwarningが出るので注意する。） Hello world! stdin.Rをこうしておく #! /usr/bin/env Rscript input_lines &lt;- readLines(&quot;stdin&quot;) x = input_lines[1] y = input_lines[2] cat(x, y) そしてコマンドプロンプトで次のようにすれば、read_text.txtから標準入力を受け取ることができる。 Rscript stdin.R &lt; read_text.txt プロンプトの出力はこうなる Hello world! これでatcoderにも参戦できる！ （atcoderでRは使用不可、、、） "],
["03_ido_keido.html", "Chapter: 3 緯度経度からちょっとインタラクティブな地図作成 3.1 ライブラリ読み込み 3.2 データ準備 3.3 ポップアップの文字作成 3.4 マーカーリスト 3.5 地図にプロットする 3.6 データ一覧 3.7 マーカーリスト", " Chapter: 3 緯度経度からちょっとインタラクティブな地図作成 参考にした記事 というかほぼこれ https://rpubs.com/kazutan/jssp2015_leaflet 3.1 ライブラリ読み込み library(tidyverse) library(here) library(DT) # 表作成用 library(ggmap) # 住所・緯度経度対応用 library(leaflet) # プロット用 library(stringi) # 全角から半角変換 3.2 データ準備 緯度経度取得後の想定データ # 東京ドーム 日本、〒112-0004 東京都文京区後楽１丁目３−６１ 35.7056396 139.7518913 # 福島聖天通商店街 日本、〒553-0003 大阪府大阪市福島区福島７丁目７−１２ 34.6976052 135.4846712 # 銀座通り商店街 日本、〒489-0043 愛知県瀬戸市朝日町 35.2266746 137.100508 df &lt;- tribble( ~id, ~lat, ~lon, ~address, ~group, ~name, 1, 35.7056396, 139.7518913,&quot;〒112-0004 東京都文京区後楽１丁目３−６１&quot;, &quot;スポーツ&quot;, &quot;東京ドーム&quot;, 2, 34.6976052, 135.4846712,&quot;〒112-0004 東京都文京区後楽１丁目３−６１&quot;, &quot;商店街A&quot; ,&quot;福島聖天通商店街&quot;, 3, 35.2266746, 137.100508,&quot;〒112-0004 東京都文京区後楽１丁目３−６１&quot;, &quot;商店街B&quot;, &quot;銀座通り商店街&quot; ) # https://www.pediatricsurgery.site/entry/2017/10/12/105242 df &lt;- df %&gt;% mutate(address = stri_trans_nfkc(address)) # 住所の全角を半角に変換 df ## # A tibble: 3 x 6 ## id lat lon address group name ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 35.7 140. 〒112-0004 東京都文京区後楽1丁目3-61 スポーツ 東京ドーム ## 2 2 34.7 135. 〒112-0004 東京都文京区後楽1丁目3-61 商店街A 福島聖天通商店街 ## 3 3 35.2 137. 〒112-0004 東京都文京区後楽1丁目3-61 商店街B 銀座通り商店街 3.3 ポップアップの文字作成 df &lt;- df %&gt;% mutate(popup = paste(name, group, address, sep=&quot;&lt;br/&gt;&quot;)) df ## # A tibble: 3 x 7 ## id lat lon address group name popup ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 35.7 140. 〒112-0004 東京都文京区後楽~ スポーツ~ 東京ドーム~ 東京ドーム&lt;br/&gt;スポーツ&lt;br/&gt;〒112-0004 ~ ## 2 2 34.7 135. 〒112-0004 東京都文京区後楽~ 商店街A 福島聖天通商店街~ 福島聖天通商店街&lt;br/&gt;商店街A&lt;br/&gt;〒112-00~ ## 3 3 35.2 137. 〒112-0004 東京都文京区後楽~ 商店街B 銀座通り商店街~ 銀座通り商店街&lt;br/&gt;商店街B&lt;br/&gt;〒112-000~ 3.4 マーカーリスト icon_df &lt;- tibble(group = df$group, icon = paste0(here(&quot;picture/icon/&quot;), &quot;/&quot;,dir(here(&quot;picture/icon/&quot;))[1:3])) icon_df ## # A tibble: 3 x 2 ## group icon ## &lt;chr&gt; &lt;chr&gt; ## 1 スポーツ C:/Users/AkiyamaHiroki/Desktop/my_trivial/picture/icon/marker-icon-2x-black.~ ## 2 商店街A C:/Users/AkiyamaHiroki/Desktop/my_trivial/picture/icon/marker-icon-2x-blue.p~ ## 3 商店街B C:/Users/AkiyamaHiroki/Desktop/my_trivial/picture/icon/marker-icon-2x-gold.p~ 3.5 地図にプロットする # iconの高さと幅 w &lt;- 20 h &lt;- 30 geo &lt;- df %&gt;% leaflet() %&gt;% addTiles() for (gru in df$group){ icon_list &lt;- icons(iconUrl = icon_df %&gt;% filter(group == gru) %&gt;% pull(icon), iconWidth = w, iconHeight = h, iconAnchorX = w/2, iconAnchorY = h) geo &lt;- geo %&gt;% addMarkers(lng = ~lon, lat = ~lat, popup = ~popup, group = gru, icon = icon_list, data = dplyr::filter(.data = df, group == gru)) %&gt;% addLayersControl(overlayGroups = df$group, options = layersControlOptions(collapsed = FALSE)) } geo 3.6 データ一覧 # 一覧表示 DT::datatable(dplyr::select(df,name:group),options = list(searchHighlight = TRUE), filter = &#39;top&#39;) 3.7 マーカーリスト icon_df &lt;- tibble(group = unique(df$group), icon = paste0(here(&quot;picture/icon/&quot;), &quot;/&quot;,dir(here(&quot;picture/icon/&quot;))[1:3])) icon_df ## # A tibble: 3 x 2 ## group icon ## &lt;chr&gt; &lt;chr&gt; ## 1 スポーツ C:/Users/AkiyamaHiroki/Desktop/my_trivial/picture/icon/marker-icon-2x-black.~ ## 2 商店街A C:/Users/AkiyamaHiroki/Desktop/my_trivial/picture/icon/marker-icon-2x-blue.p~ ## 3 商店街B C:/Users/AkiyamaHiroki/Desktop/my_trivial/picture/icon/marker-icon-2x-gold.p~ "]
]
