[
["index.html", "日々の雑学 はじめに 0.1 環境", " 日々の雑学 Akiyama Hiroki 最終更新日: 2020-05-05 はじめに 作成中です hogehoge fugafuga 0.1 環境 sessionInfo() ## R version 3.6.3 (2020-02-29) ## Platform: x86_64-w64-mingw32/x64 (64-bit) ## Running under: Windows 10 x64 (build 18363) ## ## Matrix products: default ## ## locale: ## [1] LC_COLLATE=Japanese_Japan.932 LC_CTYPE=Japanese_Japan.932 ## [3] LC_MONETARY=Japanese_Japan.932 LC_NUMERIC=C ## [5] LC_TIME=Japanese_Japan.932 ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] lubridate_1.7.8 patchwork_1.0.0 jsonlite_1.6.1 here_0.1 ## [5] bookdown_0.18 forcats_0.5.0 stringr_1.4.0 dplyr_0.8.99.9002 ## [9] purrr_0.3.3 readr_1.3.1 tidyr_1.0.2 tibble_3.0.0 ## [13] ggplot2_3.3.0 tidyverse_1.3.0 ## ## loaded via a namespace (and not attached): ## [1] tidyselect_1.0.0 xfun_0.12 haven_2.2.0 lattice_0.20-41 ## [5] colorspace_1.4-1 vctrs_0.2.99.9011 generics_0.0.2 htmltools_0.4.0 ## [9] yaml_2.2.1 utf8_1.1.4 rlang_0.4.5.9000 pillar_1.4.3 ## [13] glue_1.4.0 withr_2.1.2 DBI_1.1.0 dbplyr_1.4.2 ## [17] modelr_0.1.6 readxl_1.3.1 lifecycle_0.2.0 munsell_0.5.0 ## [21] gtable_0.3.0 cellranger_1.1.0 rvest_0.3.5 evaluate_0.14 ## [25] labeling_0.3 knitr_1.28 fansi_0.4.1 broom_0.5.5 ## [29] Rcpp_1.0.4.6 scales_1.1.0 backports_1.1.6 farver_2.0.3 ## [33] fs_1.4.1 hms_0.5.3 packrat_0.5.0 digest_0.6.25 ## [37] stringi_1.4.6 rprojroot_1.3-2 grid_3.6.3 cli_2.0.2 ## [41] tools_3.6.3 magrittr_1.5 pacman_0.5.1 crayon_1.3.4 ## [45] pkgconfig_2.0.3 ellipsis_0.3.0 xml2_1.3.1 reprex_0.3.0 ## [49] assertthat_0.2.1 rmarkdown_2.1 httr_1.4.1 rstudioapi_0.11 ## [53] R6_2.4.1 nlme_3.1-145 compiler_3.6.3 "],
["01_android_analysis.html", "Chapter: 1 android分析 1.1 ライブラリの準備 1.2 activityをダウンロード 1.3 ここから解析", " Chapter: 1 android分析 1.1 ライブラリの準備 pacman::p_loadを使うと、ライブラリをまとめて読み込んでくれます。また、インストールされていないライブラリがある場合は、インストールかつ読み込みを行ってくれます。 pacmanがインストールされていない場合は、コメントアウトしてインストールしてください。 # install.packages(pacman) pacman::p_load(tidyverse, jsonlite, patchwork, here, lubridate, update = FALSE) 1.2 activityをダウンロード あとで書く google takeout で検索 1.3 ここから解析 1.3.1 activityの読み込み android &lt;- jsonlite::fromJSON(here(&quot;data/android_activity.json&quot;)) 1.3.2 読み込んだactivityデータの概要確認 glimpse(android) ## Rows: 63,120 ## Columns: 5 ## $ header [3m[90m&lt;chr&gt;[39m[23m &quot;びよーんったー Pro&quot;, &quot;Nova Launcher ホーム&quot;, &quot;Gmail&quot;, &quot;Slack&quot;, &quot;Nova Launcher ホー... ## $ title [3m[90m&lt;chr&gt;[39m[23m &quot;使用: びよーんったー Pro&quot;, &quot;使用: Nova Launcher ホーム&quot;, &quot;使用: Gmail&quot;, &quot;使用: Slack&quot;, &quot;... ## $ titleUrl [3m[90m&lt;chr&gt;[39m[23m &quot;https://play.google.com/store/apps/details?id=com.ABS104a.biyontterpro... ## $ time [3m[90m&lt;chr&gt;[39m[23m &quot;2020-04-16T21:29:57.048Z&quot;, &quot;2020-04-16T21:29:54.832Z&quot;, &quot;2020-04-16T21:... ## $ products [3m[90m&lt;list&gt;[39m[23m [&quot;Android&quot;, &quot;Android&quot;, &quot;Android&quot;, &quot;Android&quot;, &quot;Android&quot;, &quot;Android&quot;, &quot;An... 1.3.3 timeデータを変換 android &lt;- android %&gt;% mutate(time = parse_datetime(time, locale = locale(tz = &quot;Japan&quot;)) ) %&gt;% mutate(date = lubridate::date(time), year = lubridate::year(time)) 1.3.4 年月ごとのデータ数の集計 2018年8月以前のデータが少ない。 activityデータの収集がうまくいっていなかった？ android %&gt;% group_by(year, month(date)) %&gt;% count() ## # A tibble: 37 x 3 ## # Groups: year, month(date) [37] ## year `month(date)` n ## &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 2016 12 2 ## 2 2017 1 1 ## 3 2017 2 56 ## 4 2017 3 26 ## 5 2017 5 6 ## 6 2017 6 64 ## 7 2017 7 12 ## 8 2017 8 29 ## 9 2017 9 32 ## 10 2017 11 4 ## # ... with 27 more rows android %&gt;% count(date) %&gt;% ggplot() + geom_line(aes(date,n)) + scale_x_date(breaks = &quot;month&quot;, guide = guide_axis(n.dodge = 3)) 1.3.5 データの準備 2019年と2020年のデータのみを使うことにする。 android_latest &lt;- android %&gt;% filter(year %in% c(2019, 2020)) アプリの名前が長いから20文字までにする。 android_latest &lt;- android_latest %&gt;% mutate(header = if_else(str_length(header) &gt;= 20, substr(header, 1, 20), header)) android &lt;- android %&gt;% mutate(header = if_else(str_length(header) &gt;= 20, substr(header, 1, 20), header)) 1.3.6 アプリの使用回数（2019-2020） android_latest %&gt;% count(header, sort = TRUE) %&gt;% head(5) %&gt;% mutate(header = fct_reorder(header, n)) %&gt;% ggplot() + geom_col(aes(y = header, x = n)) + theme_minimal() + labs(title = &quot;Most used Apps - Overall&quot;, subtitle = &quot;Android Smartphone usage&quot;, caption = &quot;Data:Google Takeout&quot;) 1.3.7 アプリの使用回数（すべての年） android %&gt;% count(header, sort = TRUE) %&gt;% head(5) %&gt;% mutate(header = fct_reorder(header, n)) %&gt;% ggplot() + geom_col(aes(y = header, x = n)) + theme_minimal() + labs(title = &quot;Most used Apps - Overall&quot;, subtitle = &quot;Android Smartphone usage&quot;, caption = &quot;Data:Google Takeout&quot;) 1.3.8 比較（2019 vs 2020） android_latest %&gt;% filter(year %in% &#39;2019&#39;) %&gt;% group_by(year, header) %&gt;% summarise(n = n()) %&gt;% arrange(desc(n)) %&gt;% head(5) %&gt;% #View() mutate(header = fct_reorder(header, n)) %&gt;% ggplot() + geom_col(aes(y = header, x = n)) + # facet_wrap(~year, scales = &quot;free&quot;) + theme_minimal() + labs(title = &quot;Most used Apps - 2019&quot;, subtitle = &quot;Android Smartphone usage&quot;, caption = &quot;Data:Google Takeout&quot;) -&gt; p2019 android_latest %&gt;% filter(year %in% &#39;2020&#39;) %&gt;% group_by(year, header) %&gt;% summarise(n = n()) %&gt;% arrange(desc(n)) %&gt;% head(5) %&gt;% #View() mutate(header = fct_reorder(header, n)) %&gt;% ggplot() + geom_col(aes(y = header, x = n)) + # facet_wrap(~year, scales = &quot;free&quot;) + theme_minimal() + labs(title = &quot;Most used Apps - 2020&quot;, subtitle = &quot;Android Smartphone usage&quot;, caption = &quot;Data:Google Takeout&quot;) -&gt; p2020 p2019 / p2020 "],
["02_standard_input.html", "Chapter: 2 標準入力 2.1 readLines 2.2 スクリプトで計算処理 2.3 テキストファイルを読ませる", " Chapter: 2 標準入力 標準入力、つまりはPythonで言うところのinput()をRでやろとしたら、かなり苦労したのでtipsとしてまとめておくことにした。 2.1 readLines ずばりRで標準入力をするにはreadLinesを使う。ただし、 input_lines &lt;- readLines(&quot;stdin&quot;) このように\"stdin\"という引数を使用する。おそらくstandard input の略か何かだろう。 注意すべきは、このコードをRのコンソールで実行してしまうとRがうんともすんとも言わなくなってしまうこと。 詳しい理由はわからないが、コマンドプロンプトからの標準入力を受けるように指示しているので、コンソールで実行してしまうとダメ、ということなのだろうか（誰か教えて欲しい）。 たとえばstdin.Rに下記のように記述しておき、 #! /usr/bin/env Rscript input_lines &lt;- readLines(&quot;stdin&quot;) cat(input_lines[1]) # catは標準出力 コマンドプロンプトから下記のようにしてstdin.Rを実行してみる Rscript stdin.R すると入力待ち状態になるので、何かしら記述する。 Hello world! そして、ctrl + cあるいはctrl + zの後にEnterで入力を終了すると（他の方法ありますか？） Hello world! とプロンプトに標準出力ができる。 2.2 スクリプトで計算処理 stdin.Rに以下のように記述しておけば、標準入力で受け取った値を、計算処理をしてから返すこともできる。 #! /usr/bin/env Rscript # ライブラリもつかえる library(tidyverse) input_lines &lt;- readLines(&quot;stdin&quot;) x = as.integer(input_lines[1]) # 1つめ（1行目の入力） y = as.integer(input_lines[2]) # 2つめ cat(x + y) 2.3 テキストファイルを読ませる read_text.txtを別に以下のように準備しておき、 （read_text.txtの最終行には改行を入れないと、あとでwarningが出るので注意する。） Hello world! stdin.Rをこうしておく #! /usr/bin/env Rscript input_lines &lt;- readLines(&quot;stdin&quot;) x = input_lines[1] y = input_lines[2] cat(x, y) そしてコマンドプロンプトで次のようにすれば、read_text.txtから標準入力を受け取ることができる。 Rscript stdin.R &lt; read_text.txt プロンプトの出力はこうなる Hello world! これでatcoderにも参戦できる！ （atcoderでRは使用不可、、、） "]
]
